#!/usr/bin/env node
require('dotenv').config();

const http = require('http');
const https = require('https');
const app = require('../src/app');
const { logger } = require('../src/libs');
const { socketService } = require('../src/services');

const httpPort = normalizePort(process.env.HTTP_PORT || '6780');
const httpsPort = normalizePort(process.env.HTTPS_PORT || '6743');

const httpServer = http.createServer(app);
const httpsServer = https.createServer(getCredentials(), app);

const io = socketService.initSocket(server);
app.io = io;

httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  logger.server('Listening on ' + bind);
}

function getCredentials() {
  const key = readFileSync(process.env.KEY_PEM || '', 'utf8');
  const cert = readFileSync(process.env.CERT_PEM || '', 'utf8');
  return { key, cert };
}